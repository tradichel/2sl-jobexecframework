# https://github.com/tradichel/2sl-jobexecframework
# KMS/stacks/Key/cfn/Key.yaml
# author: @teriradichel @2ndsightlab
##############################################################
Parameters:
  cfparamEncryptArn:
    Type: CommaDelimitedList
    Default: ""
  cfparamDecryptArn:
    Type: CommaDelimitedList
    Default: ""
  cfparamAdminArnParam:
    Type: CommaDelimitedList
    Default: ""
  cfparamEncryptServices:
    Type: CommaDelimitedList
    Default: ""
  cfparamDecryptServices:
    Type: CommaDelimitedList
    Default: ""
  cfparamOrganizationId:
    Type: String
    Default: ""
  EncryptOuParam:
    Type: CommaDelimitedList
    Default: ""
  cfparamDecryptOu:
    Type: CommaDelimitedList
    Default: ""
  cfparamKeyAlias:
    Type: String
  cfparamRotate:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
  cfparamDesc:
    Type: String
    Default: ""
  cfparamTimestamp:
    Type: String
    Description: "Force an update since AWS overwrites roles and CF doesn't recognize the change"
  #the service the user is using the key with, if restricted
  cfparamService:
    Type: String
    Default: ""
  cfparamCreateGrantAllowed:
    Type: String
    Default: "false"
    AllowedValues:
      - true
      - false

Conditions:
  CreateGrantAllowed:
    !Or [
      !Equals [!Ref cfparamCreateGrantAllowed, "true"],
      !Equals [!Ref cfparamService, "ec2"],
      !Equals [!Ref cfparamService, "ecr"],
    ]
  ServiceIsSecretsManager:
    !Equals [!Ref cfparamService, "secretsmanager"]
  NoEncryptServices:
    !Equals 
      - !Select [0, !Ref cfparamEncryptServices]
      - ''
  NoDecryptServices:
    !Equals
      - !Select [0, !Ref cfparamDecryptServices]
      - ''
  NoEncryptArns:
    !Equals
      - !Select [0, !Ref cfparamEncryptArn]
      - ''
  NoDecryptArns:
    !Equals
      - !Select [0, !Ref cfparamDecryptArn]
      - ''
  NoEncryptOus:
    !Equals
      - !Select [0, !Ref EncryptOuParam]
      - ''
  NoDecryptOus:
    !Equals
      - !Select [0, !Ref cfparamDecryptOu]
      - ''

Resources:
  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Ref cfparamDesc
      EnableKeyRotation: !Ref cfparamRotate
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-1
        Statement:
          - Sid: "TempForTest"
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: "*"
            Resource: "*"

          - Sid: "Allow Administration of the key and force update"
            Effect: Allow
            Principal:
              AWS:
                !Ref cfparamAdminArnParam
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: "*"

          #Note: I do not want to give my root admin permission to delete keys.
          #However, if you delete your KMS aministrator used in the above statement,
          #You will not be able to modify or delete the key because AWS
          #changes the ARN to some invalid value (the user ID I think) 
          #without any warning or confirmation by the customer.
          - Sid: Describe, DeleteKey, GetKeyPolicy Only
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:DescribeKey
              - kms:Delete
              - kms:GetKeyPolicy
            Resource: "*"

          - !If
            - NoEncryptArns
            - !Ref AWS::NoValue
            - 
              Sid: "Encrypt which apparently requires decrypt permissions"
              Effect: Allow
              Principal:
                AWS:
                  !Ref cfparamEncryptArn
              Action:
                - 'kms:Encrypt'
                - 'kms:ReEncrypt*'
                - 'kms:GenerateDataKey'
                - 'kms:GenerateDataKeyWithoutPlaintext'
                - 'kms:Decrypt'
                - 'kms:DescribeKey'
                - !If
                    - CreateGrantAllowed                
                    - 'kms:CreateGrant'
                    - !Ref AWS::NoValue
              Resource: "*"

          - !If
            - NoDecryptArns
            - !Ref AWS::NoValue
            - 
              Sid: Decrypt
              Effect: Allow
              Principal:
                AWS:
                  !Ref cfparamDecryptArn
              Action:
                - 'kms:Decrypt'
                - 'kms:DescribeKey'
                - !If 
                  - CreateGrantAllowed
                  - 'kms:CreateGrant'
                  - !Ref AWS::NoValue
              Condition:
                !If
                  - ServiceIsSecretsManager
                  - 
                    "StringEquals":
                      "kms:ViaService":
                        - !Sub "${cfparamService}.${AWS::Region}.amazonaws.com"
                  - !Ref AWS::NoValue
              Resource: "*"

          - !If
            - NoEncryptOus
            - !Ref AWS::NoValue
            - 
              Sid: "Encrypt which apparently requires decrypt permissions"
              Effect: Allow
              Principal:
                AWS: "*"
              Action:
                - 'kms:Encrypt'
                - 'kms:ReEncrypt*'
                - 'kms:GenerateDataKey'
                - 'kms:GenerateDataKeyWithoutPlaintext'
                - 'kms:Decrypt'
                - 'kms:DescribeKey'
                - !If
                    - CreateGrantAllowed
                    - 'kms:CreateGrant'
                    - !Ref AWS::NoValue
              Resource: "*"
              Condition:
                "StringEquals":
                  "aws:PrincipalOrgID": 
                    !Ref cfparamOrganizationId
                "ForAnyValue:StringLike":
                  "aws:PrincipalOrgPaths": 
                    !Ref EncryptOuParam

          - !If
            - NoDecryptOus
            - !Ref AWS::NoValue
            - 
              Sid: Decrypt
              Effect: Allow
              Principal:
                AWS: "*"
              Action:
                - 'kms:Decrypt'
                - 'kms:DescribeKey'
                - !If
                  - CreateGrantAllowed
                  - 'kms:CreateGrant'
                  - !Ref AWS::NoValue
              Condition:
                "StringEquals":
                  "aws:PrincipalOrgID":
                    !Ref cfparamOrganizationId
                "ForAnyValue:StringLike":
                  "aws:PrincipalOrgPaths":
                    !Ref EncryptOuParam

          #The documentation recommends conditions for CloudFormation but 
          #did not get that working yet. If you are using this in a production
          #environment please add those conditions the way I added the
          #secrets manager condition above but with the appropriate condition value
          #The documentation recommends conditions for CloudFormation but 
          #did not get that working yet
      
          - !If
            - NoEncryptServices
            - !Ref AWS::NoValue
            - 
              Sid: "Services That Encrypt which apparently requires decrypt permissions"
              Effect: Allow
              Principal:
                Service:
                  !Ref cfparamEncryptServices
              Action:
                - 'kms:Encrypt'
                - !If
                    - CreateGrantAllowed
                    - 'kms:CreateGrant'
                    - !Ref AWS::NoValue
              Resource: "*"

          - !If
            - NoDecryptServices
            - !Ref AWS::NoValue
            - 
              Sid: Decrypt
              Effect: Allow
              Principal:
                Service:
                  !Ref cfparamDecryptServices
              Action:
                - 'kms:Decrypt'
                - !If
                  - CreateGrantAllowed
                  - 'kms:CreateGrant'
                  - !Ref AWS::NoValue
              Condition:
                !If
                  - ServiceIsSecretsManager
                  - 
                    "StringEquals":
                      "kms:ViaService":
                        - !Sub "${cfparamService}.${AWS::Region}.amazonaws.com"
                  - !Ref AWS::NoValue
              Resource: "*"

Outputs:
  resourceid:
    Value: !GetAtt KMSKey.KeyId
    Export:
     Name: !Sub id-kms-key-${cfparamKeyAlias}
  resourcearn:
    Value: !GetAtt KMSKey.Arn
    Export:
      Name: !Sub arn-iam-key-${cfparamKeyAlias}
  ForceUpdate:
    Value: !Sub "${cfparamTimestamp}"
    Export:
      Name: ForceUpdate
