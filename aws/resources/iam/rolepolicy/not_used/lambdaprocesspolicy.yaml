Parameters:
  cfparamName:
    Type: String
  cfparamEnv:
    Type: String
    AllowedValues: 
      - Sandbox
  HasSecretParam:
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "false"

Conditions:
  HasSecret: !Equals 
    - !Ref HasSecretParam
    - "true"

Resources:
  LambdaProcessPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub ${cfparamName}LambdaPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Action: 
              - 'ec2:CreateNetworkInterface'
              - 'ec2:DescribeNetworkInterfaces'
              - 'ec2:DeleteNetworkInterface'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${cfparamName}:*'
          - !If 
            - HasSecret
            - 
              Effect: Allow
              Action:
                - secretsmanager:GetResourcePolicy
                - secretsmanager:GetSecretValue
                - secretsmanager:DescribeSecret
                - secretsmanager:ListSecretVersionIds
              Resource: 
                -  Fn::ImportValue:
                    !Sub ${cfparamName}Secret
            - !Ref AWS::NoValue

          - !If 
            - HasSecret
            - 
              Effect: Allow
              Action: secretsmanager:ListSecrets
              Resource: '*'
            - !Ref AWS::NoValue

          - !If 
            - HasSecret
            - 
              Effect: Allow
              Action:   
                - kms:DescribeKey
                - kms:GenerateDataKey
                - kms:Decrypt
              Resource:
                - Fn::ImportValue:
                    !Sub ${cfparamEnv}Key
            - !Ref AWS::NoValue

      Roles: 
        - !Sub ${cfparamName}LambdaRole

